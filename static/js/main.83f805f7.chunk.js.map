{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["getNumIndex","len","arguments","length","undefined","Math","floor","random","start","source","result","i","line","j","push","getData","total","data","numberPools","index","splice","randomSelect","App","list1","react_default","a","createElement","className","id","map","item","split","n","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAIA,SAASA,IAAwB,IAAZC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,IACzB,OAAOG,KAAKC,MAAMD,KAAKE,SAAWN,GA0CpC,SAASO,IACP,OAhBF,SAAiBC,GAKf,IAJA,IAEMC,EAAS,GAENC,EAAI,EAAGA,EAJJ,GAIaA,IAAK,CAE5B,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EALA,GAKeA,IAC7BD,EAAKE,KAAKL,EANI,GAMGE,EAAgBE,IAEnCH,EAAOI,KAAKF,GAEd,OAAOF,EAIAK,CA3BT,WAGE,IAHqC,IAAjBC,EAAiBd,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,IACtBe,EAdR,WAEE,IADA,IAAIP,EAAS,GACJC,EAAI,EAAGA,EAAI,IAAMA,IACpBA,EAAI,GACND,EAAOI,KAAK,KAAOH,GACVA,EAAI,IACbD,EAAOI,KAAK,IAAMH,GAElBD,EAAOI,KAAK,GAAKH,GAGrB,OAAOD,EAGMQ,GACPR,EAAS,GACNC,EAAI,EAAGA,EAAIK,EAAOL,IAAK,CAC9B,IAAMQ,EAAQnB,EAAYiB,EAAKd,QAC/BO,EAAOI,KAAKG,EAAKE,IACjBF,EAAKG,OAAOD,EAAO,GAErB,OAAOT,EAmBQW,IAEjB,IA+BeC,EA/BO,WACpB,IAAIC,EAAQf,IAEZ,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,qBACtBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZJ,EAAMM,IAAI,SAACjB,EAAMO,GAChB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXf,EAAKiB,IAAI,SAACC,GACT,OACEN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXG,EAAKC,MAAM,IAAIF,IAAI,SAACG,GACnB,OAAOR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcK,SAM/CR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,OAA4BR,EAAQ,UC3DhCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.83f805f7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// 产生万联数组\nfunction getNumIndex(len = 1000) {\n  return Math.floor(Math.random() * len);\n}\n\nfunction numberPools() {\n  let result = [];\n  for (let i = 0; i < 1000; i++) {\n    if (i < 10) {\n      result.push(\"00\" + i);\n    } else if (i < 100) {\n      result.push(\"0\" + i);\n    } else {\n      result.push(\"\" + i);\n    }\n  }\n  return result;\n}\nfunction randomSelect(total = 12 * 25) {\n  const data = numberPools();\n  const result = [];\n  for (let i = 0; i < total; i++) {\n    const index = getNumIndex(data.length);\n    result.push(data[index]);\n    data.splice(index, 1);\n  }\n  return result;\n}\n\nfunction getData(source: string[]) {\n  const row = 25;\n  const lineCount = 12;\n  const result = [];\n\n  for (let i = 0; i < row; i++) {\n    const line = [];\n    for (let j = 0; j < lineCount; j++) {\n      line.push(source[i * lineCount + j]);\n    }\n    result.push(line);\n  }\n  return result;\n}\n\nfunction start(): string[][] {\n  return getData(randomSelect());\n}\nconst App: React.FC = () => {\n  let list1 = start();\n\n  return (\n    <div className=\"App\" id=\"home-number-index\">\n      <div className=\"all-page\">\n        <div className=\"page\">\n          {list1.map((line, index) => {\n            return (\n              <div className=\"line\">\n                <ul className=\"left\">\n                  {line.map((item: any) => {\n                    return (\n                      <li className=\"lian\">\n                        {item.split(\"\").map((n:any) => {\n                          return <span className=\"liannumber\">{n}</span>;\n                        })}\n                      </li>\n                    );\n                  })}\n                </ul>\n                <div className=\"right\">Row {index + 1}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './reset.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}